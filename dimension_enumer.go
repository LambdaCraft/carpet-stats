// Code generated by "enumer -type=Dimension -transform=snake -trimprefix=Dim -json -text"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _DimensionName = "overworldthe_netherthe_end"

var _DimensionIndex = [...]uint8{0, 9, 19, 26}

func (i Dimension) String() string {
	if i < 0 || i >= Dimension(len(_DimensionIndex)-1) {
		return fmt.Sprintf("Dimension(%d)", i)
	}
	return _DimensionName[_DimensionIndex[i]:_DimensionIndex[i+1]]
}

var _DimensionValues = []Dimension{0, 1, 2}

var _DimensionNameToValueMap = map[string]Dimension{
	_DimensionName[0:9]:   0,
	_DimensionName[9:19]:  1,
	_DimensionName[19:26]: 2,
}

// DimensionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DimensionString(s string) (Dimension, error) {
	if val, ok := _DimensionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Dimension values", s)
}

// DimensionValues returns all values of the enum
func DimensionValues() []Dimension {
	return _DimensionValues
}

// IsADimension returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Dimension) IsADimension() bool {
	for _, v := range _DimensionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Dimension
func (i Dimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Dimension
func (i *Dimension) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Dimension should be a string, got %s", data)
	}

	var err error
	*i, err = DimensionString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Dimension
func (i Dimension) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Dimension
func (i *Dimension) UnmarshalText(text []byte) error {
	var err error
	*i, err = DimensionString(string(text))
	return err
}
